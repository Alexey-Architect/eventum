<?php
/*
 * This file is part of the Eventum (Issue Tracking System) package.
 *
 * @copyright (c) Eventum Team
 * @license GNU General Public License, version 2 or later (GPL-2+)
 *
 * For the full copyright and license information,
 * please see the COPYING and AUTHORS files
 * that were distributed with this source code.
 */

namespace Eventum\Crypto;

use Crypto;
use RandomLib;
use InvalidArgumentException;
use BadMethodCallException;

/**
 * Class Crypto Manager.
 *
 * Provides methods to encrypt/decrypt a text using own private key.
 * The encrypted value is base64 encoded so it's safe to store to database.
 *
 * @package Eventum\Crypto
 */
class CryptoManager
{
    /**
     * Encrypts a message.
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     *
     * @param string $plaintext
     * @param string $key optional key to encrypt
     * @return string
     * @throws \CannotPerformOperationException
     */
    public static function encrypt($plaintext, $key = null)
    {
        if (!$plaintext && (string)$plaintext !== '0') {
            throw new InvalidArgumentException('Refusing to encrypt empty value');
        }
        return rtrim(
            base64_encode(
                Crypto::encrypt($plaintext, $key ?: self::getKey())
            ), '='
        );
    }

    /**
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     *
     * @param string $ciphertext
     * @return string
     * @throws \CannotPerformOperationException
     * @throws \InvalidCiphertextException
     */
    public static function decrypt($ciphertext)
    {
        return Crypto::decrypt(
            base64_decode($ciphertext),
            self::getKey()
        );
    }

    /**
     * Key rotation method -- decrypt with your old key then re-encrypt with your new key
     *
     * @param string $key the new key
     * @param string $data
     * @return string
     */
    public static function rotate($key, $data)
    {
        return self::encrypt(self::decrypt($data), $key);
    }

    /**
     * Load or generate secret key used for crypt
     *
     * @return string
     */
    private static function getKey()
    {
        static $key;
        if (!$key) {
            $secret_file = APP_CONFIG_PATH . '/secret_key.php';
            $key = self::loadPrivateKey($secret_file);

            if (!$key) {
                // use RandomLib to get most compatible implementation
                // Crypto uses mcrypt *ONLY* without any fallback
                $factory = new RandomLib\Factory();
                $generator = $factory->getMediumStrengthGenerator();
                $key = $generator->generate(Crypto::KEY_BYTE_SIZE);

                self::storePrivateKey($secret_file, $key);
            }
        }
        return $key;
    }

    private static function loadPrivateKey($file)
    {
        if (!file_exists($file)) {
            return null;
        }
        if (!is_readable($file)) {
            throw new InvalidArgumentException("Secret file '$file' not readable");
        }
        $private_key = trim(file_get_contents($file));
        if (!$private_key) {
            throw new InvalidArgumentException("Unable to read secret file '$file");
        }

        return $private_key;
    }

    private static function storePrivateKey($file, $key)
    {
        if (file_exists($file) && !is_writable($file)) {
            throw new InvalidArgumentException("Secret file '$file' not writable");
        }
        $res = file_put_contents($file, $key);
        if (!$res) {
            throw new BadMethodCallException("Unable to store secret file '$file'");
        }
    }
}
